#!/usr/bin/env python

import cv2
import numpy as np
import tensorflow as tf
import rospy
from sensor_msgs.msg import Image
from cv_bridge import CvBridge, CvBridgeError
from nets import yolo, tiny_yolo_voc, yolo9000
from yolo_tf.msg import ObjectArray, ObjectDesc, Feature, FeatureArray
import threading

def sigmoid(x):
    return 1/(1+np.exp(-x))

class YoloDetector:
    def __init__(self, ckpt_file, group_file, input_shape=(416,416)):
        self.ckpt_file = ckpt_file
        self.input_shape = input_shape
        if ckpt_file.endswith('yolo.ckpt'):
            self.num_classes = 80
            self.num_boxes = 5
            self.anchor_ws = np.array([0.738768, 2.42204, 4.30971, 10.246, 12.6868])
            self.anchor_hs = np.array([0.874946, 2.65704, 7.04493, 4.59428, 11.8741])
            self.grid_h = input_shape[0]/32
            self.grid_w = input_shape[1]/32
            self.net = yolo
            self.feature_tensor = 'Conv_20/Leaky:0'
            self.group_sizes = None
        elif ckpt_file.endswith('tiny-yolo-voc.ckpt'):
            self.num_classes = 20
            self.num_boxes = 5
            self.anchor_ws = np.array([1.08, 3.42, 6.63, 9.42, 16.62])
            self.anchor_hs = np.array([1.19, 4.41, 11.38, 5.11, 10.52])
            self.grid_h = input_shape[0]/32
            self.grid_w = input_shape[1]/32
            self.net = tiny_yolo_voc
            self.feature_tensor = 'Conv_7/Leaky:0'
            self.group_sizes = None
        elif ckpt_file.endswith('yolo9000.ckpt'):
            self.num_classes = 9418
            self.num_boxes = 3
            self.anchor_ws = np.array([0.77871, 3.00525, 9.22725])
            self.anchor_hs = np.array([1.14074, 4.31277, 9.61974])
            self.grid_h = input_shape[0]/32
            self.grid_w = input_shape[1]/32
            self.net = yolo9000
            self.feature_tensor = 'Conv_17/Leaky:0'
            self.group_sizes = []
            with open(group_file) as f:
                while True:
                    l = f.readline()
                    if not l:
                        break
                    self.group_sizes.append(int(l))

        self.bridge = CvBridge()
        self.image_sub = rospy.Subscriber('image', Image, self.callback)
        self.obj_pub = rospy.Publisher('objects', ObjectArray, queue_size=10)
        self.feat_pub = rospy.Publisher('features', FeatureArray, queue_size=10)
        self.sess = None
        self.cond = threading.Condition()

    def make_graph(self):
        self.ph_x = tf.placeholder(tf.float32,
                                   shape=[None, self.input_shape[0], self.input_shape[1], 3])
        if self.group_sizes is not None:
            out = self.net(self.ph_x, self.group_sizes,
                           num_classes=self.num_classes,
                           num_boxes=self.num_boxes, is_training=False)
        else:
            out = self.net(self.ph_x, num_classes=self.num_classes,
                           num_boxes=self.num_boxes, is_training=False)
        self.bbox_pred = out['bbox_pred']
        self.obj_prob = out['obj_prob']
        self.cls_prob = out['cls_prob']
        #if self.feature_tensor:
        #c = feature.get_shape()[3]
        #self.ph_followeeness_weights = tf.placeholder(tf.float32, shape=[1,1,c,self.num_boxes])
        #self.ph_followeeness_biases = tf.placeholder(tf.float32, shape=[self.num_boxes])
        #self.followeeness = tf.nn.conv2d(feature, self.ph_followeeness_weights, [1,1,1,1], 'SAME')
        #self.followeeness = tf.nn.bias_add(self.followeeness, self.ph_followeeness_biases)

    def initialize(self):
        if self.sess:
            sess.close()
        config = tf.ConfigProto()
        config.gpu_options.allow_growth = True
        self.make_graph()
        self.sess = tf.Session(config=config)
        tf.train.Saver().restore(self.sess, self.ckpt_file)
        rospy.loginfo('Network was restored from {}.'.format(self.ckpt_file))
        self.image_batch = None

    def callback(self, data):
        if not self.sess:
            return
            #self.initialize()
        try:
            cv_image = self.bridge.imgmsg_to_cv2(data) #Assuming 'bgr8'
        except CvBridgeError as e:
            rospy.logerr(e)

        image_batch = cv_image[:,:,::-1]/255.
        self.cond.acquire()
        self.image_batch = np.expand_dims(cv2.resize(image_batch, self.input_shape[::-1]), 0)
        self.image_shape = cv_image.shape
        self.frame_id = data.header.frame_id
        self.stamp = data.header.stamp
        self.cond.notify()
        self.cond.release()

    def spin(self):
        self.cond.acquire()
        while self.image_batch is None:
            self.cond.wait()
        image_batch = self.image_batch
        self.image_batch = None
        self.cond.release()

        fetch = [self.bbox_pred, self.obj_prob, self.cls_prob]
        if self.feature_tensor:
            fetch.append(self.feature_tensor)
        predictions = self.sess.run(fetch, {self.ph_x: image_batch})
        bbox_pred, obj_prob, cls_prob = predictions[:-1]
        xs = (np.arange(self.grid_w).reshape([1,-1,1]) + sigmoid(bbox_pred[0,:,:,:,0]))/self.grid_w
        ys = (np.arange(self.grid_h).reshape([-1,1,1]) + sigmoid(bbox_pred[0,:,:,:,1]))/self.grid_h
        ws = np.exp(bbox_pred[0,:,:,:,2])*self.anchor_ws.reshape([1,1,-1])/self.grid_w
        hs = np.exp(bbox_pred[0,:,:,:,3])*self.anchor_hs.reshape([1,1,-1])/self.grid_h
        xs = (xs-ws/2) * self.image_shape[1]
        ys = (ys-hs/2) * self.image_shape[0]
        ws = ws * self.image_shape[1]
        hs = hs * self.image_shape[0]
        box_inds = np.argsort(obj_prob.flat)[::-1]
        msg = ObjectArray()
        msg.header.stamp = self.stamp
        msg.header.frame_id = self.frame_id
        rospy.loginfo('Maximum objectness: {}'.format(obj_prob.flat[box_inds[0]]))
        for i in box_inds:
            if obj_prob.flat[i] < 0.3:
                break
            x = xs.flat[i]
            y = ys.flat[i]
            w = ws.flat[i]
            h = hs.flat[i]
            obj = ObjectDesc()
            obj.row = (i/self.num_boxes) / self.grid_w
            obj.column = (i/self.num_boxes) % self.grid_w
            obj.box_index = i % self.num_boxes
            obj.top = y
            obj.left = x
            obj.bottom = y+h
            obj.right = x+w
            obj.objectness = obj_prob.flat[i]
            obj.class_probability = cls_prob.flat[i*self.num_classes:(i+1)*self.num_classes]
            msg.objects.append(obj)
        self.obj_pub.publish(msg)

        if self.feature_tensor:
            feature = predictions[-1]
            c = feature.shape[3]

            feat_msg = FeatureArray()
            feat_msg.header.stamp = msg.header.stamp
            feat_msg.header.frame_id = msg.header.frame_id

            data = np.zeros(len(msg.objects)*c, dtype=np.float32)
            flags = np.zeros((self.grid_h, self.grid_w), dtype=np.bool)
            for i, obj in enumerate(msg.objects):
                if flags[obj.row, obj.column]:
                    continue
                f = Feature()
                f.row = obj.row
                f.column = obj.column
                f.data = feature[0, obj.row, obj.column, :]
                feat_msg.features.append(f)
                flags[obj.row, obj.column] = True
            self.feat_pub.publish(feat_msg)

import sys
yd = YoloDetector(sys.argv[1], sys.argv[2], input_shape=(256,256))
rospy.init_node('yolo')
yd.initialize()
while not rospy.is_shutdown():
    yd.spin()
#try
#    rospy.spin()
#except KeyboardInterrupt:
#    quit()
